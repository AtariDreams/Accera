trigger: none

pool: LinuxAMDGPUPool

steps:
  - bash: |
      sudo sysctl -w kernel.core_pattern="$(Build.SourcesDirectory)/build/core-%e-%s-%u-%g-%p-%t.dump"
      ulimit -c unlimited
      python -m pip install -U pip
      python -m pip install -r $(Build.SourcesDirectory)/requirements.txt
      python -m pip install -r $(Build.SourcesDirectory)/accera/onnx-emitter/test/requirements.txt
      python -m pip install pytest-azurepipelines
      echo "mkdir $HOME/.ccache"
      mkdir $HOME/.ccache
      echo "ln -s $HOME/.ccache $(System.DefaultWorkingDirectory)/ccache"
      ln -s $HOME/.ccache $(System.DefaultWorkingDirectory)/ccache
      conan remote add accera $(CONAN_REMOTE)
      conan user -p $(CONAN_PWD) -r accera $(CONAN_USERNAME)
    displayName: Install prereqs
    env:
      CONAN_PWD: $(CONAN_PWD)

  - bash: |
      git submodule init
      git submodule update
      ./external/vcpkg/bootstrap-vcpkg.sh
      ./external/vcpkg/vcpkg install catch2 tomlplusplus
    displayName: Update vcpkg dependencies
    workingDirectory: "$(Build.SourcesDirectory)"

  - bash: |
      mkdir build
      cd build
      cmake .. -DCMAKE_BUILD_TYPE=Debug -DLLVM_LIT_ARGS=-vv -GNinja -DLLVM_SETUP_VARIANT=$(LLVM_SETUP_VARIANT)
    displayName: Configure CMake
    workingDirectory: "$(Build.SourcesDirectory)"

  - bash: |
      cmake --build . --config Debug
    displayName: CMake default build
    workingDirectory: "$(Build.SourcesDirectory)/build"

  - bash: |
      cmake --build . --config Debug --target check-all
    displayName: CMake build check-all
    workingDirectory: "$(Build.SourcesDirectory)/build"

  - bash: |
      cmake --build . --config Debug --target install
    displayName: CMake install build
    workingDirectory: "$(Build.SourcesDirectory)/build"

  - bash: |
      python ./setup.py build -g -b build -t build bdist_wheel -d build/dist
    displayName: Python build
    workingDirectory: "$(Build.SourcesDirectory)"

  # CUDA_VISIBLE_DEVICES can be overwritten at Pipeline scheduling time to
  # a comma-separated list of device IDs
  # e.g. CUDA_VISIBLE_DEVICES="0, 3"
  - bash: |
      export LD_LIBRARY_PATH=${ROCM_PATH}/lib
      export CUDA_VISIBLE_DEVICES=$(CUDA_VISIBLE_DEVICES)
      export LLVM_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-12
      echo "CUDA_VISIBLE_DEVICES" ${CUDA_VISIBLE_DEVICES}
      python -m pytest -v --junitxml=test/test-mfma_tests.xml accera/test/mfma_tests.py
    displayName: Run MFMA tests
    workingDirectory: "$(Build.SourcesDirectory)/build/lib.linux-x86_64-3.8"

  - bash: |
      export LD_LIBRARY_PATH=${ROCM_PATH}/lib
      export CUDA_VISIBLE_DEVICES=$(CUDA_VISIBLE_DEVICES)
      export LLVM_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-12
      python -m pytest -v --junitxml=test/test-smoke_test.xml accera/test/smoke_test.py -k "rocm"
    displayName: Run ROCm smoke tests
    workingDirectory: "$(Build.SourcesDirectory)/build/lib.linux-x86_64-3.8"

  - task: CopyFiles@2
    condition: always()
    inputs:
      SourceFolder: "$(Build.SourcesDirectory)/build"
      Contents: |
        **/*.cu
        **/*.mlir
        **/*.dump
      TargetFolder: "$(Build.StagingDirectory)"
      CleanTargetFolder: true
      OverWrite: true
      preserveTimestamp: true

  - task: PublishPipelineArtifact@1
    condition: always()
    inputs:
      targetPath: "$(Build.StagingDirectory)"
      artifact: "Artifacts"
      publishLocation: "pipeline"

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: "**/test-*.xml"
      testRunTitle: 'Publish test results for Python'
      searchFolder: '$(Build.SourcesDirectory)/build'
