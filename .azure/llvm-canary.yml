# Pipeline for building Accera against the latest LLVM releases
schedules:
  # https://crontab.guru/every-monday
  - cron: "0 0 * * MON"
    displayName: Weekly build
    branches:
      include:
        - main

pool:
  vmImage: "ubuntu-latest"

container:
  # Container with the latest available vcpkg LLVM port + patches
  image: $(CONTAINER_REGISTRY)/accera-llvm-ubuntu:latest
  endpoint: acceracontainers

steps:
- script: |
    sudo apt-get install python3 python3-pip python3-dev -y
    ulimit -c unlimited
    python3 -m pip install -U pip
    python3 -m pip install -r $(Build.SourcesDirectory)/requirements.txt
    echo "mkdir $HOME/.ccache"
    mkdir $HOME/.ccache
    echo "ln -s $HOME/.ccache $(System.DefaultWorkingDirectory)/ccache"
    ln -s $HOME/.ccache $(System.DefaultWorkingDirectory)/ccache
  displayName: Install prerequisites

# Use the already-built vcpkg toolchain
- script: |
    export VCPKG_TOOLCHAIN=/opt/vcpkg/scripts/buildsystems/vcpkg.cmake
    export ACCERA_PACKAGE_FOR_CI=1
    python3 setup.py build bdist_wheel -d $(Build.SourcesDirectory)/dist
    cd $(Build.SourcesDirectory)/accera/python/compilers
    python3 setup.py build bdist_wheel -d $(Build.SourcesDirectory)/dist
    cd $(Build.SourcesDirectory)/accera/python/llvm
    python3 setup.py build bdist_wheel -d $(Build.SourcesDirectory)/dist
    cd $(Build.SourcesDirectory)/accera/python/gpu
    python3 setup.py build bdist_wheel -d $(Build.SourcesDirectory)/dist
  displayName: Build
  workingDirectory: "$(Build.SourcesDirectory)"

- script: |
    python3 -m pip install dist/accera-*.whl --find-links=dist --no-index
    python3 -m pip install dist/accera_gpu*.whl
    python3 -m accera.test.smoke_tests
  displayName: Smoke tests
  workingDirectory: "$(Build.SourcesDirectory)"

- task: CopyFiles@2
  condition: always()
  inputs:
    SourceFolder: "$(Build.SourcesDirectory)/dist"
    Contents: |
      **/*
    TargetFolder: "$(Build.StagingDirectory)/python"
    CleanTargetFolder: true
    OverWrite: true
    preserveTimestamp: true

- task: PublishPipelineArtifact@1
  condition: always()
  inputs:
    targetPath: "$(Build.StagingDirectory)"
    artifact: "Artifacts"
    publishLocation: "pipeline"